{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"console.log": {
		"prefix": "cw",
		"body": [
			"console.log($1);"
		]
	},
	"console.error": {
		"prefix": "ce",
		"body": [
			"console.error(${1:e});"
		]
	},
	"iife": {
		"prefix": "iife",
		"body": [
			"(function () {",
			"\t'use strict';\n",
			"\t$1",
			"}());"
		],
		"description": "Immediately Invoked Function Expression"
	},
	"aiife": {
		"prefix": "aiife",
		"body": [
			"(async () => {",
			"\t$1",
			"})();"
		],
		"description": "Async Immediately Invoked Function Expression"
	},
	"named function": {
		"prefix": "f",
		"body": [
			"function $1($2) {",
			"\t$3",
			"}"
		]
	},
	"await": {
		"prefix": "aw",
		"body": [
			"await "
		]
	},
	"const": {
		"prefix": "c",
		"body": [
			"const $1"
		]
	},
	"event.preventDefault();": {
		"prefix": "ep",
		"body": [
			"event.preventDefault();"
		]
	},
	"module.exports": {
		"prefix": "me",
		"body": [
				"module.exports = $0;"
		]
},
"use strict": {
		"prefix": "us",
		"body": [
				"'use strict';\n"
		]
},
	"trycatch(e)": {
		"prefix": "tryn",
		"body": [
			"try {",
			"\t$1",
			"} catch (err) {",
			"\tnext(err)",
			"}"
		],
	},
	"const require": {
		"prefix": "cr",
		"body": [
			"const $1 = require('$1');"
		]
	},
	"require": {
		"prefix": "rr",
		"body": [
			"require($1);"
		]
	},
	"document": {
		"prefix": "d",
		"body": [
			"document.$1"
		]
	},
	"document.querySelector": {
		"prefix": "qs",
		"body": [
			"document.querySelector('$1');"
		]
	},
	"$1.addEventListener": {
		"prefix": "ae",
		"body": [
			"$1.addEventListener('$2', (event) => {",
			"\t$3",
			"});"
		]
	},
	"event.currentTarget": {
		"prefix": "ec",
		"body": [
			"event.currentTarget"
		]
	},
	"exports": {
		"prefix": "ex",
		"body": [
			"exports.$1"
		]
	},
	"return": {
		"prefix": "r",
		"body": [
			"return"
		]
	},
	"lambda": {
		"prefix": "l",
		"body": [
			"($1) => $2"
		]
	},
	"lambda e": {
		"prefix": "le",
		"body": [
			"(err) => $1"
		]
	},
	"lambda +": {
		"prefix": "ll",
		"body": [
			"($1) => {",
			"\t$2",
			"}"
		]
	},
	"lambda promise": {
		"prefix": "lp",
		"body": [
			"(${1:doc}) => {",
			"\t$2",
			"}).catch((e) => {",
			"\t$3",
			"}"
		]
	},
	"ctx": {
		"prefix": "cc",
		"body": [
			"ctx"
		]
	},
	"ctx.throw()": {
		"prefix": "cct",
		"body": [
			"ctx.throw($1)"
		]
	},
	"ctx.body": {
		"prefix": "ccb",
		"body": [
			"ctx.body = "
		]
	},
	"lambda ctx": {
		"prefix": "lc",
		"body": [
			"async (ctx) => { $2 }"
		]
	},
	"lambda ctx next": {
		"prefix": "lcn",
		"body": [
			"async (ctx, next) => { $2 }"
		]
	},
	"lambda ctx +": {
		"prefix": "llc",
		"body": [
			"async (ctx) => {",
			"\t$2",
			"}"
		]
	},
	"lambda ctx + next": {
		"prefix": "llcn",
		"body": [
			"async (ctx, next) => {",
			"\t$2",
			"}"
		]
	},
	"async ctx": {
		"prefix": "ac",
		"body": [
			"async $1(ctx) {",
			"\t$2",
			"},"
		]
	},
	"new promise": {
		"prefix": "pp",
		"body": [
			"new Promise((resolve, reject) => {",
			"\t$1",
			"});"
		]
	},
	"lambda req res": {
		"prefix": "lr",
		"body": [
			"(req, res) => {",
			"\t$1",
			"}"
		]
	},
	"lambda req res next": {
		"prefix": "lrn",
		"body": [
			"(req, res, next) => {",
			"\t$1",
			"}"
		]
	},
	"export default": {
		"prefix": "ed",
		"body": [
			"export default $1;"
		]
	},
	"import from": {
		"prefix": "i",
		"body": [
			"import $2 from '$1';"
		]
	},
	"import $1 from $1": {
		"prefix": "ii",
		"body": [
			"import $1 from '$1';"
		]
	},
	"class constructor": {
		"prefix": "ctor",
		"body": [
			"constructor($1) {\n\t$0\n}"
		]
	},
	"mocha describe": {
		"prefix": "des",
		"body": [
			"describe('$1', () => {",
			"\t$2",
			"});"
		]
	},
	"mocha it": {
		"prefix": "it",
		"body": [
			"it('$1', async () => {",
			"\t$2",
			"});"
		]
	},
	"jest test": {
		"prefix": "tt",
		"body": [
			"test('$1', async () => {",
			"\t$2",
			"});"
		]
	},
	"<$1 />": {
		"prefix": "rv",
		"body": [
			"<$1 />"
		]
	},
	"export from": {
		"prefix": "ef",
		"body": [
			"export $2 from '$1';"
		]
	},
	"eslint disable": {
		"prefix": "esd",
		"body": [
			"/* eslint-disable ${1:no-console} */"
		]
	}
}
