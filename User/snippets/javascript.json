{
    /*
	 // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1')",
			"$2"
		],
		"description": "Log output to console"
	}
*/
    "console.log": {
        "prefix": "cw",
        "body": [
            "console.log($1)"
        ]
    },
    "console.error": {
        "prefix": "ce",
        "body": [
            "console.error(${1:e})"
        ]
    },
    "ctx": {
        "prefix": "cc",
        "body": [
            "ctx"
        ]
    },
    "ctx.throw()": {
        "prefix": "cct",
        "body": [
            "ctx.throw($1)"
        ]
    },
    "ctx.body": {
        "prefix": "ccb",
        "body": [
            "ctx.body = "
        ]
    },
    "iife": {
        "prefix": "iife",
        "body": [
            "(function () {",
            "\t'use strict'\n",
            "\t$1",
            "}())"
        ],
        "description": "Immediately-invoked function expression"
    },
    "aiife": {
        "prefix": "aiife",
        "body": [
            "(async () => {",
            "\t$1",
            "})()"
        ],
        "description": "Async immediately-invoked function expression"
    },
    "fun": {
        "prefix": "fl",
        "body": [
            "function ($1) {",
            "\t$2",
            "}"
        ],
        "description": "no named function"
    },
    "named function": {
        "prefix": "fn",
        "body": [
            "function $1($2) {",
            "\t$3",
            "}"
        ],
        "description": "named function"
    },
    "const require": {
        "prefix": "cr",
        "body": [
            "const $1 = require('$1')"
        ],
        "description": "const require"
    },
    "const": {
        "prefix": "c",
        "body": [
            "const $1"
        ],
        "description": "const"
    },
    "exports": {
        "prefix": "ex",
        "body": [
            "exports.$1"
        ],
        "description": "exports"
    },
    "return": {
        "prefix": "r",
        "body": [
            "return"
        ],
        "description": "return"
    },
    "async": {
        "prefix": "as",
        "body": [
            "async "
        ],
        "description": "async"
    },
    "await": {
        "prefix": "aw",
        "body": [
            "await "
        ],
        "description": "await"
    },
    "trycatch(e)": {
        "prefix": "tryn",
        "body": [
            "try {",
            "\t$1",
            "} catch (err) {",
            "\tnext(err)",
            "}"
        ],
    },
    "require": {
        "prefix": "req",
        "body": [
            "require('$1')"
        ],
        "description": "require"
    },
    "module.exports": {
        "prefix": "me",
        "body": [
            "module.exports = $0"
        ],
        "description": "module.exports"
    },
    "use strict": {
        "prefix": "us",
        "body": [
            "'use strict'\n"
        ],
        "description": "use strict"
    },
    "lambda": {
        "prefix": "ll",
        "body": [
            "($1) => $2"
        ],
        "description": "lambda"
    },
    "lambda e": {
        "prefix": "lle",
        "body": [
            "(e) => $1"
        ],
        "description": "lambda e"
    },
    "lambda +": {
        "prefix": "lll",
        "body": [
            "($1) => {",
            "\t$2",
            "}"
        ],
        "description": "lambda +"
    },
    "lambda promise": {
        "prefix": "llp",
        "body": [
            "(${1:doc}) => {",
            "\t$2",
            "}).catch((e) => {",
            "\t$3",
            "}"
        ],
        "description": "lambda promise"
    },
    "lambda ctx": {
        "prefix": "lc",
        "body": [
            "async (ctx) => { $2 }"
        ]
    },
    "lambda ctx next": {
        "prefix": "lcn",
        "body": [
            "async (ctx, next) => { $2 }"
        ]
    },
    "lambda ctx +": {
        "prefix": "llc",
        "body": [
            "async (ctx) => {",
            "\t$2",
            "}"
        ]
    },
    "lambda ctx + next": {
        "prefix": "llcn",
        "body": [
            "async (ctx, next) => {",
            "\t$2",
            "}"
        ]
    },
    "async ctx": {
        "prefix": "ac",
        "body": [
            "async $1(ctx) {",
            "\t$2",
            "},"
        ]
    },
    "new promise": {
        "prefix": "pp",
        "body": [
            "new Promise((resolve, reject) => {",
            "\t$1",
            "})"
        ],
        "description": "new promise"
    },
    "lambda req res": {
        "prefix": "lr",
        "body": [
            "(req, res) => {",
            "\t$1",
            "}"
        ],
        "description": "lambda req res"
    },
    "lambda req res next": {
        "prefix": "lrn",
        "body": [
            "(req, res, next) => {",
            "\t$1",
            "}"
        ],
        "description": "lambda req res nex"
    },
    "export default": {
        "prefix": "ed",
        "body": [
            "export default $1"
        ],
        "description": "export default"
    },
    "import $1 from $1": {
        "prefix": "ii",
        "body": [
            "import $1 from '$1'"
        ],
        "description": "import $1 from $1"
    },
    "import from": {
        "prefix": "iii",
        "body": [
            "import $2 from '$1'"
        ],
        "description": "import from"
    },
    "class constructor": {
        "prefix": "ctor",
        "body": [
            "constructor($1) {\n\t$0\n}"
        ],
        "description": "class constructor"
    },
    "mocha describe": {
        "prefix": "des",
        "body": [
            "describe('$1', () => {",
            "\t$2",
            "})"
        ]
    },
    "mocha it": {
        "prefix": "it",
        "body": [
            "it('$1', async () => {",
            "\t$2",
            "})"
        ]
    },
    "jest test": {
        "prefix": "tt",
        "body": [
            "test('$1', async () => {",
            "\t$2",
            "})"
        ]
    },
    "<$1 />": {
        "prefix": "rv",
        "body": [
            "<$1 />"
        ],
        "description": "<$1 />"
    },
    "export from": {
        "prefix": "ef",
        "body": [
            "export $2 from '$1'"
        ],
        "description": "export from"
    },
    "handle function event": {
        "prefix": "he",
        "body": [
            "${1:handle}(${2:e}) {",
            "\te.preventDefault()",
            "\t$3",
            "}"
        ],
        "description": "handle function event"
    },
    "vue html object": {
		"prefix": "oo",
		"body": [
			"{ $1 }"
		]
	},
    "eslint disable": {
		"prefix": "esd",
		"body": [
			"/* eslint-disable ${1:no-console} */"
		]
	},
    "import": {
		"prefix": "im",
		"body": [
			"import $2 from '$1'"
		]
	}
}
