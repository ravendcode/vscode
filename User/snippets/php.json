{
	// Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"echo PHP_EOL": {
		"prefix": "cw",
		"body": [
			"echo $1, PHP_EOL;"
		]
	},
	"alias echo PHP_EOL": {
		"prefix": "eln",
		"body": [
			"echo $1, PHP_EOL;"
		]
	},
	"echo": {
		"prefix": "e",
		"body": [
			"echo $1;"
		]
	},
	// "$this->": {
	// 	"prefix": "this",
	// 	"body": [
	// 		"$$this->"
	// 	]
	// },
	"symfony render twig": {
		"prefix": "s:ren",
		"body": [
			"return $$this->render('$1.html.twig');"
		]
	},
	"echo br": {
		"prefix": "ebr",
		"body": [
			"echo $1, '<br>';"
		]
	},
	"var_dump": {
		"prefix": "vd",
		"body": [
			"var_dump($1);"
		]
	},
	"alias var_dump": {
		"prefix": "v",
		"body": [
			"var_dump($1);"
		]
	},
	"function named": {
		"prefix": "fn",
		"body": [
			"function $1($2)",
			"{",
			"\t$3",
			"}"
		]
	},
	"function lambda": {
		"prefix": "fl",
		"body": [
			"function ($1)",
			"{",
			"\t$2",
			"}"
		]
	},
	"lambda": {
		"prefix": "ll",
		"body": [
			"function ($1) use ($2)",
			"{",
			"\t$3",
			"}"
		]
	},
	"inline lambda": {
		"prefix": "lll",
		"body": [
			"function ($1) {$2}"
		]
	},
	"public function": {
		"prefix": "pubf",
		"body": [
			"public function ${1:__construct}($2)",
			"{",
			"\t$3",
			"}"
		]
	},
	"public static function": {
		"prefix": "pubsf",
		"body": [
			"public static function $1($2)",
			"{",
			"\t$3",
			"}"
		]
	},
	"private function": {
		"prefix": "prif",
		"body": [
			"private function $1($2)",
			"{",
			"\t$3",
			"}"
		]
	},
	"protected function": {
		"prefix": "prof",
		"body": [
			"protected function $1($2)",
			"{",
			"\t$3",
			"}"
		]
	},
	"public function action": {
		"prefix": "pubfa",
		"body": [
			"public function $1Action($2)",
			"{",
			"\t$3",
			"}"
		]
	},
	"return": {
		"prefix": "r",
		"body": [
			"return"
		]
	},
	"class Controller": {
		"prefix": "cc",
		"body": [
			"class $1${2:Controller}$3\n{\n\t$4\n}"
		]
	},
	"var_dump and die": {
		"prefix": "vdd",
		"body": [
			"die(var_dump($1));"
		]
	},
	"__DIR__": {
		"prefix": "dir",
		"body": [
			"__DIR__"
		]
	},
	"declare": {
		"prefix": "dec",
		"body": [
			"declare(strict_types=1);"
		]
	},
	"static": {
		"prefix": "ss",
		"body": [
			"static"
		]
	},
	"public static": {
		"prefix": "pubs",
		"body": [
			"public static"
		]
	},
	"protected static": {
		"prefix": "pros",
		"body": [
			"protected static"
		]
	},
	"private static": {
		"prefix": "pris",
		"body": [
			"private static"
		]
	},
	"require": {
		"prefix": "rr",
		"body": [
			"require ${1:__DIR__ . }'$2';\n"
		]
	},
	"require_once": {
		"prefix": "rrq",
		"body": [
			"require_once ${1:__DIR__ . }'$2';\n"
		]
	},
	"Name::class": {
		"prefix": "cl",
		"body": [
			"$1::class"
		]
	},
	"compact": {
		"prefix": "com",
		"body": [
			"compact($1)"
		]
	},
	"dump": {
		"prefix": "d",
		"body": [
			"dump($1);"
		]
	},
	"dd": {
		"prefix": "dd",
		"body": [
			"dd($1);"
		]
	},
	"bin2hex(random_bytes(16))": {
		"prefix": "token",
		"body": [
			"bin2hex(random_bytes(16))"
		]
	},
	"return redirect()->route()": {
		"prefix": "l:red",
		"body": [
			"return redirect()->route('$1');"
		]
	},
	"view": {
		"prefix": "l:view",
		"body": [
			"return view('$1', $2);"
		]
	},
	"$this->view": {
		"prefix": "l:ren",
		"body": [
			"return $$this->view();"
		]
	},
	"$this->view with title": {
		"prefix": "l:tren",
		"body": [
			"$$this->title = '$1';",
			"return $$this->view();"
		]
	}
}
